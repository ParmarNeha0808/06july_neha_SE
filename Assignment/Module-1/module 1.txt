  question 1 - what is software? what is software engineering?

 = answer 1 -
  
          * What is software:

	 Software is the language of computer.
     - is a colleaction of computer programs and related data that provide the 
       instruction for telling a computer what to do and how to do it.
     - Just like human language.
     - 3 main groups depending on their use and application.

     1) System software/ operating system
     2) Application s/w
     3) Programming language

	

    1) System s/w or OS:

      - Provides the basic function for computer usage and helps to run the 
        compuer hardware and system.
      - is the s/w used by the computer to translate inputs from various
        sources into a language which a machine can understand.
      - Basically OS coordinates the different hardware components of a                 computer.
      - Ex.Linux,wimdow,macOS,Android,iOS



    2) Application s/w:

      - is the general designation of computer programs for performing user             tasks.
      - Typs of application s/w
       
       1)Mobile app:
        - Application that run on mobile 
        - Ex.Instagram,facebook,etc
   
       2)Desktop app:
        - That runstand alone in a desktop or laptop computer.
        - Ex.Microsoft office suite which includes word,Excel and PowerPoint.
        - Ex.outlook for email,andfirefox,Google chhrome, Mozailla are the 
          web browser.
        - Anti virus is an application and so is the media player.
       
       3)Web app:
        - That run on a web browser
        - Ex. google.com,facebook.com,etc

 
     3) Programming s/w:   

       - is the process of desiging,writing,testing,debugging,and maintaining 
         the source code of computer programs.
       - This s/w is pawritten in aprogramming language.
       - The purpose of programming is to create a program that exhibits a 
         certaindesired behavior.


 
           * what is software Engineering:


       Software: a program or set program containing instrucation whaich               provide desired functionality.
    
       Engineering: process of designing and building something that ensure            particular purpose.

       Software Engineering : 
                  - software engineering is the art of developing quality 
       software on tim,e and within budget.
               
           Software Engineering is a systematic approach to the design,                 development, and maintenance of a software system.


        - Software engineering is the multi parson construction of multi                  version software. 

       * Team Work
            - Scale issue (-program well is not enough)+Communication Issue

       *Successful software system must evolve or perish
            - Change is the norm, not the exception

       - Software engineering is different from other engineering disciplines

       * Not constrained by physical laws
            - limit =human mind

       * It is constrained by political forces
            - balancing stake holder


      - It is a branch of engineering that deals with the development of                software products. It operates within a set of principles, best                 practices, and methods that have been carefully honed throughout the            years, changing as software and technology change.

      - Software engineering leads to a product that is reliable, efficient,            and effective at what it does. While software engineering can lead to           products that do not do this, the product will almost always go back            into the production stage.

      - So, what is the complete definition of software engineering?

       The IEEE fully defines software engineering as:

     * The application of a systematic, disciplined, quantifiable approach to          the development, operation, and maintenance of software; that is, the           application of engineering to software.

            What the software engineering meaning doesn’t explain is that              everything that has been software engineered needs to work on real              machines in real situations, not within.

             Software engineering starts when there is a demand for a specific        result or output for a company, from an application. From somewhere on          the IT team, typically the CIO, there is a request put into the developer       to create some sort of software.  Sometimes, this work  will be                 farmed out to independent contractors, vendors, and freelancers.                When this is the case, software engineering tools help to ensure that all       of the work done is congruent and follows best practices.





 Question 2= Explain the typs of Software.

   Answer=2:

          * Application Software:

          The most common type of software, application software is a computer            software package that performs a specific function for a user, or in            some cases, for another application. An application can be self-                contained, or it can be a group of programs that run the application            for the user.
      
          For Ex. modern applications include office suites, graphics software,           databases and database management programs, web browsers, word                  processors, software development tools, image editors and                       communication platforms.


          * System Software:

         These software programs are designed to run a computer's application            programs and hardware. System software coordinates the activities and           functions of the hardware and software. In addition, it controls the            operations of the computer hardware and provides an environment or              platform for all the other types of software to work in. 
 

         * Drive Software:

         Also known as device drivers, this software is often considered a               type of system software. Device drivers control the devices and                 peripherals connected to a computer, enabling them to perform their             specific tasks. Every device that is connected to a computer needs at           least one device driver to function.


         * Middleware:

        The term middleware describes software that mediates between                    application and system software or between two different kinds of
        application software. It also enables newer applications to work with           legacy ones.

        * Programming Software:

         Computer programmers use programming software to write code.                   Programming software and programming tools enable developers to                 develop, write, test and debug other software programs. Examples of             programming software include assemblers, compilers, debuggers and               interpreters.


  Question 3= What is SDLC? Explain each phase of SDLC.

    Answer=

        * Software Development Life Cycle:

       - SDLC is a stucture imposed on the development of a software product 
         that defines the process for planning,implementation,testing,   
         documentation,deploment,andongoing maintenance and support. there
         are a number of diffrent development models.

       - A Software Development Life Cycle is essentially a series of steps,
         or phases,that provide a model for the development and life cycle 
         management  of an application or piece of software.

       -The methodology within the SDCL process can very across industries and          organizations, but standards such as ISO/IEC 12207 represent processes 
        that establish a lifecycle for software,and provide for the                     development,acquisition,and configuration of software system.



      * SDLC Phases



   Requirement collection/Gathering     Establish customer need
   Analysis                             Model and Specify the requirement
   Design                               Model and Specify a solutio
   Implemenation                        Construct a Solution In Software
   Testing                              Validate the solutaion against the  
   Maintenance                          Repair defects and adapt the soluation 
                                        to the new requirement


    * Requirement:

     Defining requirements is considered part of planning to determine what the      application is supposed to do and its requirements. For example, a social       media application would require the ability to connect with a friend. An       inventory program might require a search feature.

   * Analysis:
    
     the analysis phase defines the requirement of the system,independent
     of how these Requirements will be accomplished.
   - This phase defines the problem that the customer is trying to solve.
   - The deliverable result at the end of this phase is a requirement document.
   - Ideally, this document states in a clear and precise fashion what is to be      built.
   - This analysis represents the ?what” phase.
   - The requirement documentaries to capture the requirements from the              customer's perspective by defining goals.
   - This phase starts with the requirement document delivered by the                requirement phase and mapsthe requirements into architecture.



    * Design phash:

      - Design Architecture Document
      - Implementation Plan
      - Critical Priority Analysis
      - Performance Analysis
      - Test Plan
      - The Design team can now expand upon the information established in the          requirementDocument.
      - The requirement document must guide this decision process.
      - Analyzing the trade-offs of necessary complexity allows for many things         to remain simple which, in turn, will eventually lead to a higher               quality product. The architecture team also converts the typical                scenarios into a test plan.


       *Implementation Phase:


     - In the implementation phase, the team builds the components either from         scratch or by composition.
     - Given the architecture document from the design phase and the                   requirement document from the analysis phase, the team should build             exactly what has been requested, though there isstill room for                  innovation and flexibility.


      *Testing Phase:

     - Simply stated, quality is very important. Many companies have not               learned that quality is important and deliver more claimed functionality        but at a lower quality level.
     - It is much easier to explain to a customer why there is a missing               feature than to explain to a customer why the product lacks quality.
     - A customer satisfied with the quality of a product will remain loyal and        wait for new Functionality in the next version.
     - Quality is a distinguishing attribute of a system indicating the degree         of excellence.
     - Regression Testing
     - Internal Testing
     - Unit Testing
     - Application Testing
     - Stress Testing    
     - An attitude change must take place to guarantee quality. Regardless if          testing is done after the-fact or continuously, testing is usually based        on a regression technique split into severalmajor focuses, namely               internal, unit, application, and stress.


     *Maintenance Phase:

    - Software maintenance is one of the activities in software engineering,          and is the process of enhancing and optimizing deployed software                (software release), as well as fixing defects.
    - Software maintenance is also one of the phases in the System Development        Life Cycle (SDLC), as it applies to software development. The maintenance       phase is the phase which comes after deployment of the software into the        field.


  Question:4 what is DFD? creat a DFD diagram on flipkard.

     Answer=4:
    
`     A Data Flow Diagram (DFD) is a traditional way to visualize the                information flows within a system. A neat and clear DFD can depict a good       amount of the system requirements graphically. It can be manual,                automated, or a combination of both.
 
     It shows how information enters and leaves the system, what changes the         information and where information is stored. The purpose of a DFD is to         show the scope and boundaries of a system as a whole. It may be used as a       communications tool between a systems analyst and any person who plays a        part in the system that acts as the starting point for redesigning a            system.

      DFD Diagram Natations:

       Now we'd like to briefly introduce to you a few diagram notations which
       you will see in the tutorial below.

    *Process:

     A process is a business activity or function where the manipulation and         transformation of data take place. A process can be decomposed to a finer       level of details, for representing how data is being processed within the       process. 


     "screen short" of process.




     *Data Store:

     A data store represents the storage of persistent data required and/or          produced by the process. Here are some examples of data stores: membership      forms, database tables, etc.




    " screen short " of data store.





    
   *Data Flow:

    A data flow represents the flow of information, with its direction             represented by an arrowhead that shows at the end(s) of flow connector.





     "screen short" of Data flow.






    * DFD diagram on flipkard:





    " screen short " of DFD level 0
  
    " screen short"  of DFD level 1














     Question=5 What is Flow chart? creat a floechat to make addition of two                 numbers.

        *Answer=5:

       Flow chart:


       A flow chart is a graphical or symbolic representation of a process.            Each step in the process is represented by a different symbol and               contains a short description of the process step. The flowchart symbols         are linked together with arrows showing the process flow direction.


      What is a flowchart?

      A flowchart is a graphical representation of the operations involved in a       data processing system.


    - Symbols are used to represent particular operations or data.
    - Flow lines indicate the sequence of operations (Top to down sequence)



                        Terminal(start or stop of program flow)




                        Input/output operation



   
                        Connector




                        Process to be performed




                        Decision/Comparison opreation 
                        Not that one arrow gose in,two go out
               


     
     * Common Flowchart Symbols:


      Different flow chart symbols have different meanings. The most common           flow chart symbols are:

    - Terminator: An oval flow chart shape indicating the start or end of the         process.
    - Process: A rectangular flow chart shape indicating a normal process flow        step.
    - Decision: A diamond flow chart shape indication a branch in the                 process flow.
    - Connector: A small, labeled, circular flow chart shape used to indicate a       jump in the process flow. 
    - Data: A parallelogram that indicates data input or output (I/O) for a           process.
    - Document: Used to indicate a document or report.



    *Flowchart to make addition of two numbers.




    "screen short" of flow chart.














    Question:6- What is Use case Diagram?Create a use case on bill payment on                 paytm.
   
        Answer=6:
         
     Some people don't know what use case is, while the rest under-estimated         the usefulness of use cases in developing a good software product. Is use       case diagram underrated? I hope you will find the answer when finished          reading this article.


    *So what is a use case diagram? 

     A UML use case diagram is the primary form of system/software requirements      for a new software program underdeveloped. Use cases specify the expected       behavior (what), and not the exact method of making it happen (how).
     It is an effective technique for communicating system behavior in the           user's terms by specifying all externally visible system behavior.


     A use case diagram is usually simple. It does not show the detail of the        use cases:

    - It only summarizes some of the relationships between use cases, actors,         and systems.
    - It does not show the order in which steps are performed to achieve the          goals of each use case.



    * Use case on bill payment on paytm:



     "screen shot" of use case.


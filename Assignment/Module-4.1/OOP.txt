
 * Question : What is OOP? List OOP concepts.

   answer:-

	* object-oriented programming (OOP):

	Object-oriented programming (OOP) is a computer programming model that 	        organizes software design around data, or objects, rather than 	                functions and logic. An object can be defined as a data field that has          unique attributes and behavior.

	
	OOP focuses on the objects that developers want to manipulate rather 	        than the logic required to manipulate them. This approach to                    programming is well-suited for programs that are large, complex and             updated or maintained. This includes programs for manufacturing and  
        as well as mobile applications; for example, OOP can be used for                manufacturing system simulation software.


	The organization of an object-oriented program also makes the method 		beneficial to collaborative development, where projects are divided 		into groups. Additional benefits of OOP include code reusability, 		scalability and efficiency.	
	
	
	The first step in OOP is to collect all of the objects a programmer 	        wants to manipulate and identify how they relate to each other -- an 	        exercise known as data modeling.

	
	Examples of an object can range from physical entities, such as a human 	being who is described by properties like name and address, to small 	        computer programs, such as widgets.


        Once an object is known, it is labeled with a class of objects that 	        defines the kind of data it contains and any logic sequences that can 	        manipulate it. Each distinct logic sequence is known as a method.               Objects can communicate with well-defined interfaces called messages.


	
	* List OOP concepts :-


        Before starting to learn C++ it is essential to have a basic knowledge          of the concepts of Object oriented programming. Some of the important           object oriented features are namely:

	
	. Objects
        . Classes
	. Inheritance
        . Data Abstraction
        . Data Encapsulation
        . Polymorphism
        . Overloading
        . Reusability


	* Objects:

        Object is the basic unit of object-oriented programming. Objects are            identified by its unique name. An object represents a particular                instance of a class. There can be more than one instance of a class.            Each instance of a class can hold its own relevant data.

	
	* Classes:

        Classes are data types based on which objects are created. Objects with         similar properties and methods are grouped together to form a Class.            Thus a Class represents a set of individual objects. Characteristics of         an object are represented in a class as Properties. The actions that            can be performed by objects become functions of the class and are               referred to as Methods.


	* Inheritance:

        Inheritance is the process of forming a new class from an existing              class or base class. The base class is also known as parent class or            super class. The new class that is formed is called derived class.              Derived class is also known as a child class or sub class. Inheritance          helps in reducing the overall code size of the program, which is an             important concept in object-oriented programming. 


	* Data Abstraction:

        Data Abstraction increases the power of programming language by                 creating user defined data types. Data Abstraction also represents the          needed information in the program without presenting the details.


	* Data Encapsulation:

        Data Encapsulation combines data and functions into a single unit               called Class. When using Data Encapsulation, data is not accessed               diretly; it is only accessible through the functions present inside             the class. Data Encapsulation enables the important concept of data             hiding possible.


	* Polymorphism:

        Polymorphism allows routines to use variables of different types at             different times. An operator or function can be given different                 meanings or functions. Polymorphism refers to a single function or              multi-functioning operator performing in different ways.

	
	* Overloading:

        Overloading is one type of Polymorphism. It allows an object to have            different meanings, depending on its context. When an existing operator         or function begins to operate on new data type, or class, it is                 understood to be overloaded.


	* Reusability:

        This term refers to the ability for multiple programmers to use the             same written and debugged existing class of data. This is a time saving         device and adds code efficiency to the language. Additionally, the              programmer can incorporate new features to the existing class, further
        developing the application and allowing users to achieve increased              performance. This time saving feature optimizes code, helps in gaining          secured applications and facilitates easier maintenance on the                  application.

        The implementation of each of the above object-oriented programming             features for C++ will be highlighted in later section.


	


	
























	
















     